# Multi-stage build for ccswarm standalone deployment
FROM rust:1.75 as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy source code
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY examples ./examples

# Build the application in release mode
RUN cargo build --release

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    git \
    tmux \
    nodejs \
    npm \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from builder
COPY --from=builder /app/target/release/ccswarm /usr/local/bin/

# Copy example configurations
COPY --from=builder /app/examples /opt/ccswarm/examples

# Create workspace directory
WORKDIR /workspace

# Set environment variables for standalone mode
ENV CCSWARM_SIMULATION=true
ENV RUST_LOG=info
ENV CCSWARM_CONFIG_PATH=/workspace/ccswarm.json

# Create a default configuration if none exists
RUN echo '#!/bin/bash\n\
if [ ! -f /workspace/ccswarm.json ]; then\n\
  cp /opt/ccswarm/examples/configs/standalone.json /workspace/ccswarm.json\n\
fi\n\
exec "$@"' > /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["ccswarm", "start"]