# AI-Sessions TODO List for ccswarm Integration

This file lists requirements and enhancements needed in ai-session to fully support ccswarm's integration.

## Required Enhancements

### 1. SessionContext API Extensions
- [x] Add `get_message_count()` method to SessionContext
- [x] Add `get_total_tokens()` method to SessionContext
- [x] Add `get_recent_messages(n: usize)` method to return last n messages
- [x] Add `compress_context()` async method that returns bool indicating if compression occurred
- [x] Ensure `Message` struct has public fields: role, content, timestamp, token_count
- [x] Make `add_message()` method take single Message parameter (not two parameters)
- [x] Make `add_message()` method synchronous (not async), or provide sync variant
- [x] Ensure SessionContext has public `config` field with `max_tokens` field

### 2. MessageBus Enhancements
- [x] Add `subscribe_all()` method that returns a receiver for all messages
- [x] Add `publish_to_agent(agent_id: &AgentId, message: AgentMessage)` async method
- [x] Ensure AgentMessage enum supports all required variants:
  - Registration { agent_id, capabilities, metadata }
  - TaskAssignment { task_id, agent_id, task_data }
  - TaskCompleted { agent_id, task_id, result }
  - TaskProgress { agent_id, task_id, progress, message }
  - HelpRequest { agent_id, context, priority }
  - StatusUpdate { agent_id, status, metrics }
  - Custom { message_type, data }

### 3. Coordination Module Exports
- [x] Export MultiAgentSession from coordination module
- [x] Export AgentId type from coordination module
- [x] Add `register_agent()` method to MultiAgentSession

### 4. Core Module Enhancements
- [x] Ensure AISession has public fields or getters for:
  - id: SessionId
  - status: RwLock<SessionStatus>
  - context: Arc<RwLock<SessionContext>>
- [x] Add async trait support (`async-trait` crate) if not already included

### 5. Output Module Requirements
- [ ] Export OutputManager, OutputParser, ParsedOutput types
- [ ] Implement semantic output parsing for common developer tools:
  - Build output (cargo, npm, etc.)
  - Test results
  - Linting results
  - Error messages

### 6. Security Module Requirements
- [ ] Implement capability-based access control
- [ ] Add rate limiting functionality
- [ ] Export security types needed by ccswarm

### 7. Observability Module Requirements
- [ ] Export DecisionTracker type
- [ ] Export AIProfiler type
- [ ] Add `track_decision()` method to DecisionTracker

### 8. Persistence Module Requirements
- [ ] Implement session state snapshots
- [ ] Add command history tracking
- [ ] Support zstd compression for storage

## Nice-to-Have Features

### 1. Performance Optimizations
- [ ] Batch message processing in MessageBus
- [ ] Lazy loading of session context
- [ ] Incremental context compression

### 2. Developer Experience
- [ ] Better error messages with context
- [ ] Debug trait implementations for all public types
- [ ] Comprehensive examples in documentation

## Testing Requirements
- [ ] Integration tests for multi-agent scenarios
- [ ] Benchmarks for token reduction claims (93%)
- [ ] Examples showing ccswarm integration patterns

## Documentation Requirements
- [ ] API documentation for all public methods
- [ ] Migration guide from other session managers
- [ ] Performance tuning guide

## Additional Requirements (Based on Deep Analysis)

### 10. Enhanced Error Handling Support
- [ ] Export structured error types for better error mapping
- [ ] Support error context chains (similar to anyhow's context)
- [ ] API to define error recovery strategies per session type
- [ ] Distinguish between recoverable and non-recoverable errors

### 11. Advanced Session Persistence Features
- [ ] Session snapshot creation and restoration (beyond message history)
- [ ] Session migration between hosts/containers
- [ ] Incremental state persistence (save only changes)
- [ ] Session versioning for rollback capabilities
- [ ] Fine-grained compression configuration

### 12. Performance Monitoring & Metrics
- [ ] Detailed per-session token usage tracking with cost estimation
- [ ] API call latency tracking and context compression timing
- [ ] Session memory usage profiling over time
- [ ] Built-in benchmarking tools for session operations
- [ ] Resource limits enforcement (memory/CPU per session)

### 13. Enhanced Agent Communication
- [ ] Broadcast channels for agent-to-all messaging
- [ ] Priority-based message delivery in MessageBus
- [ ] Optional persistent message queue with recovery
- [ ] Dead letter queue for failed message deliveries
- [ ] Message batching for efficiency

### 14. Batch Processing & Queueing
- [ ] Native task batching API for multiple tasks per session
- [ ] Built-in task queue with priority support
- [ ] Parallel execution of independent tasks within a session
- [ ] Automatic rate limiting based on provider limits
- [ ] Backpressure handling for queue overflow

### 15. Session Lifecycle Management
- [ ] Pre-configured session templates for common use cases
- [ ] Warm session pool for faster task execution
- [ ] Session cloning (copy state to new session)
- [ ] Graceful degradation when AI features unavailable
- [ ] Session archiving for later analysis

### 16. Advanced Context Management
- [ ] Reusable context templates for common scenarios
- [ ] Context inheritance (child sessions inherit parent context)
- [ ] Context merging from multiple sources
- [ ] Selective context inclusion/exclusion
- [ ] Time-based context expiration

### 17. Provider-Specific Features
- [ ] Mid-session provider switching
- [ ] Automatic provider fallback on failures
- [ ] Provider-specific configuration tuning
- [ ] Cost-based provider selection
- [ ] Dynamic provider capability detection

### 18. Session Coordination
- [ ] Define dependencies between sessions
- [ ] Multi-session orchestration for complex tasks
- [ ] Cross-session state sharing
- [ ] Session grouping for management
- [ ] Distributed session execution support

### 19. TMux Bridge Enhancements (DEPRECATED - Replace with Native Sessions)
- [x] Full async implementation (remove `block_on` usage)
- [x] Window management support (new_window, list_windows, kill_window)
- [x] Pane management (list_panes, split_window, select_pane)
- [x] Capture pane output with proper async API
- [x] Session existence check method (`has_session`)
- [x] Send special keys support (C-c, C-z, etc.)
- [x] Session environment variable management
- [x] TMux option setting (history-limit, mouse mode, etc.)
- [x] Session name validation (no ':', '.' characters)

### 24. Native Session Implementation (TMux Replacement) - ✅ COMPLETED
- [x] Replace TMux dependency with native session management
- [x] Implement NativeSessionManager as drop-in replacement for TmuxClient
- [x] Add portable PTY support for cross-platform compatibility
- [x] Maintain session isolation without external TMux server
- [x] Support window/pane emulation through virtual session management
- [x] Environment variable management without TMux
- [x] Command execution and output capture in native sessions
- [x] Session persistence without TMux session files
- [x] Background session management
- [x] Signal handling (C-c, C-z) in native sessions

### 25. Implementation Completed Features
- [x] Updated ccswarm SessionManager to use ai-session's NativeSessionManager
- [x] Replaced all TMux operations with native session equivalents
- [x] Maintained backward compatibility for session management APIs
- [x] Updated session creation, pause, resume, attach, detach operations
- [x] Fixed message bus integration with proper async handling
- [x] Resolved compilation errors and type mismatches
- [x] Successfully compiled ccswarm with new ai-session integration
- [x] AI session integration test passing ✅
- [x] Native session management working without TMux dependency ✅

### 26. Remaining Compilation Warnings & Clean-up Tasks
- [ ] Fix unused import warnings:
  - [ ] ai-session/src/tmux_bridge.rs:6 - unused `Context` import
  - [ ] src/coordination/ai_message_bus.rs:16 - unused `MessageType` import
  - [ ] src/session/ai_session_adapter.rs:11 - unused `DateTime` and `Utc` imports
  - [ ] src/session/ai_session_adapter.rs:19 - unused `ContextConfig` import
  - [ ] src/session/context_bridge.rs:9 - unused `Context as AnyhowContext` import
  - [ ] src/cli/mod.rs:1696,1699 - unused variables `workspace_pathbuf`, `agent_role`
  - [ ] src/coordination/ai_message_bus.rs:338 - unused variable `agent_id`
  - [ ] src/coordination/ai_message_bus.rs:115 - unnecessary `mut` keyword

- [ ] Fix dead code warnings:
  - [ ] ai-session/src/mcp/server.rs:18 - unused field `session_manager`
  - [ ] ai-session/src/mcp/transport.rs:83-84 - unused fields `base_url`, `client`
  - [ ] ai-session/src/native_portable.rs:18 - unused field `pty_master`
  - [ ] ai-session/src/tmux_bridge.rs:54 - unused field `panes`
  - [ ] src/cli/output.rs - unused methods in OutputFormatter implementations
  - [ ] src/coordination/ai_message_bus.rs:80,90,91 - unused TrackedTask fields
  - [ ] src/session/ai_session_adapter.rs:39 - unused field `workspace_root`
  - [ ] src/session/context_bridge.rs:53,56 - unused fields `agent_id`, `session_id`

- [ ] Workspace configuration warning:
  - [ ] Move ai-session/Cargo.toml profiles to workspace root or adjust configuration

### 20. TMux Server Management
- [x] Check if TMux server is running
- [x] Auto-start TMux server if not running
- [x] Command timeout configuration
- [x] Retry logic for failed TMux commands
- [ ] Server shutdown/cleanup methods

### 21. TMux Session Patterns
- [ ] Session template support (pre-configured layouts)
- [ ] Session cloning with TMux
- [ ] Background/foreground session management
- [ ] Session status monitoring (attached/detached)
- [ ] Multi-window session coordination

### 22. TMux Error Handling
- [ ] Structured TMux error types
- [ ] Parse TMux error messages
- [ ] Handle "no server running" errors gracefully
- [ ] Handle "session not found" errors
- [ ] Command timeout errors with context

### 23. TMux Compatibility & Bridge Features
- [ ] Full TMux command compatibility in tmux_bridge module:
  - [ ] `attach_session()` - Attach to existing session
  - [ ] `detach_session()` - Detach from session
  - [ ] `set_environment()` - Set environment variables in session
  - [ ] `set_option()` - Set TMux options (history-limit, mouse mode, etc.)
  - [ ] `new_window()` - Create new windows within sessions
  - [ ] `list_windows()` - List all windows in a session
  - [ ] `list_panes()` - List panes within windows
  - [ ] `split_window()` - Split windows into panes
  - [ ] `select_window()` - Switch between windows
  - [ ] `rename_window()` - Rename windows
  - [ ] `kill_window()` - Close specific windows
  
- [ ] TMux Session Information:
  - [ ] Track session attached/detached state
  - [ ] Maintain window and pane hierarchies
  - [ ] Support window layouts and pane arrangements
  - [ ] Track active window/pane state
  - [ ] Store session creation time and last activity
  
- [ ] TMux Server Management:
  - [ ] Check if TMux server is running
  - [ ] Auto-start TMux server if needed
  - [ ] Validate session names (no ':', '.', etc.)
  - [ ] Handle TMux command timeouts and retries
  - [ ] Proper error types for TMux-specific failures
  
- [ ] TMux Integration Features:
  - [ ] Session name prefixing (e.g., "ccswarm-frontend-xyz")
  - [ ] Working directory preservation across commands
  - [ ] Capture pane output with line limits
  - [ ] Send special keys (C-c, C-z, C-d, Enter)
  - [ ] Distinguish between send_keys and send_command
  - [ ] Support for TMux environment variables
  
- [ ] TMux Migration Support:
  - [ ] List existing TMux sessions for migration
  - [ ] Capture TMux session state (output, env, working dir)
  - [ ] Convert TMux sessions to AI sessions
  - [ ] Preserve TMux session metadata during migration
  - [ ] show-environment command support

### 20. Enhanced tmux_bridge Module
- [ ] Make TmuxClient fully async (remove block_on calls)
- [ ] Add session caching to reduce TMux queries
- [ ] Support TMux-specific error handling and recovery
- [ ] Implement proper TMux session lifecycle hooks
- [ ] Add TMux command output parsing
- [ ] Support for TMux hooks and event notifications

### 21. TMux Configuration Support
- [ ] Global TMux configuration options:
  - [ ] Default shell configuration
  - [ ] Global environment variables
  - [ ] History limit settings
  - [ ] Mouse mode configuration
  - [ ] Terminal type settings
  - [ ] Display time configuration
  
- [ ] Per-session TMux options:
  - [ ] Custom key bindings
  - [ ] Status bar configuration
  - [ ] Window options
  - [ ] Pane border styles
  
### 22. TMux Session Patterns
- [ ] Common session templates:
  - [ ] Development session (editor + terminal + logs)
  - [ ] Testing session (test runner + coverage + output)
  - [ ] Debugging session (debugger + source + variables)
  - [ ] Multi-language session (multiple REPLs)
  
- [ ] Session persistence patterns:
  - [ ] Save/restore window layouts
  - [ ] Preserve pane arrangements
  - [ ] Maintain command history per pane
  - [ ] Restore working directories

### 23. TMux Compatibility Testing
- [ ] Test suite for TMux bridge functionality
- [ ] Mock TMux client for testing
- [ ] Integration tests with real TMux
- [ ] Performance benchmarks for TMux operations
- [ ] Compatibility tests across TMux versions

---

Note: This list is based on the integration attempt in ccswarm. Some of these features might already exist but need to be made public or documented better.