#!/usr/bin/env node

/**
 * Simple agent simulator for ccswarm custom provider
 * This script mimics an AI agent's behavior for standalone operation
 */

const fs = require('fs');
const path = require('path');

// Get command line arguments
const [,, role, ...promptParts] = process.argv;
const prompt = promptParts.join(' ');

// Agent role templates
const roleTemplates = {
    frontend: {
        files: {
            'component.jsx': `import React from 'react';

export const GeneratedComponent = () => {
    return (
        <div className="generated-component">
            <h2>Component Generated by Frontend Agent</h2>
            <p>Task: ${prompt}</p>
        </div>
    );
};`,
            'styles.css': `.generated-component {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin: 10px;
}

.generated-component h2 {
    color: #333;
    margin-bottom: 10px;
}`
        },
        response: `Created React component for: ${prompt}`
    },
    
    backend: {
        files: {
            'api.js': `const express = require('express');
const router = express.Router();

// Generated API endpoint
router.get('/generated', (req, res) => {
    res.json({
        message: 'Endpoint generated by Backend Agent',
        task: '${prompt}',
        timestamp: new Date().toISOString()
    });
});

module.exports = router;`,
            'model.js': `// Generated data model
class GeneratedModel {
    constructor(data) {
        this.id = data.id;
        this.name = data.name;
        this.createdAt = new Date();
        this.task = '${prompt}';
    }
    
    validate() {
        return this.name && this.name.length > 0;
    }
}

module.exports = GeneratedModel;`
        },
        response: `Created API endpoint and model for: ${prompt}`
    },
    
    devops: {
        files: {
            'deploy.sh': `#!/bin/bash
# Deployment script generated by DevOps Agent
# Task: ${prompt}

echo "üöÄ Deploying application..."
echo "Task: ${prompt}"

# Build steps
npm install
npm run build

# Deploy steps
echo "‚úÖ Deployment complete!"`,
            '.github/workflows/ci.yml': `name: CI Pipeline
# Generated by DevOps Agent for: ${prompt}

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm test
      - run: npm run build`
        },
        response: `Created deployment configuration for: ${prompt}`
    },
    
    qa: {
        files: {
            'test.spec.js': `// Test suite generated by QA Agent
// Task: ${prompt}

describe('Generated Test Suite', () => {
    test('should pass basic test', () => {
        expect(true).toBe(true);
    });
    
    test('should validate task completion', () => {
        const task = '${prompt}';
        expect(task).toBeDefined();
        expect(task.length).toBeGreaterThan(0);
    });
    
    test('should have proper structure', () => {
        const result = {
            task: '${prompt}',
            status: 'completed',
            agent: 'qa'
        };
        
        expect(result).toHaveProperty('task');
        expect(result).toHaveProperty('status');
        expect(result.status).toBe('completed');
    });
});`,
            'test-plan.md': `# Test Plan
Generated by QA Agent

## Task
${prompt}

## Test Coverage
- Unit Tests: ‚úÖ
- Integration Tests: ‚úÖ
- E2E Tests: ‚è≥

## Test Cases
1. Verify basic functionality
2. Check error handling
3. Validate data integrity
4. Test performance metrics`
        },
        response: `Created test suite for: ${prompt}`
    }
};

// Simulate processing time
function simulateWork(callback, delay = 1000) {
    setTimeout(callback, delay);
}

// Main execution
function main() {
    if (!role || !prompt) {
        console.error('Usage: simulate-agent.js <role> <prompt>');
        process.exit(1);
    }
    
    const template = roleTemplates[role] || roleTemplates.frontend;
    
    // Log activity
    console.error(`[${role.toUpperCase()} AGENT] Processing: ${prompt}`);
    
    simulateWork(() => {
        // Create files if in proper workspace
        const cwd = process.cwd();
        if (cwd.includes('agents') && cwd.includes(role)) {
            Object.entries(template.files).forEach(([filename, content]) => {
                const filepath = path.join(cwd, filename);
                fs.writeFileSync(filepath, content);
                console.error(`[${role.toUpperCase()} AGENT] Created: ${filename}`);
            });
        }
        
        // Output response (ccswarm expects this)
        const response = {
            success: true,
            agent: role,
            task: prompt,
            message: template.response,
            files_created: Object.keys(template.files),
            timestamp: new Date().toISOString()
        };
        
        // Output as JSON if environment variable is set
        if (process.env.OUTPUT_FORMAT === 'json') {
            console.log(JSON.stringify(response, null, 2));
        } else {
            console.log(template.response);
        }
    }, Math.random() * 2000 + 1000); // Random delay 1-3 seconds
}

// Run the simulator
main();